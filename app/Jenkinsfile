pipeline {
    agent any

    environment {
        // Définir ici l'URL de votre serveur SonarQube
        SONARQUBE_URL = 'http://localhost:9000'
        // Définir le token d'authentification SonarQube
        SONARQUBE_TOKEN = credentials('sonar-token') // Le nom du jeton enregistré dans Jenkins
    }

    stages {
        stage('Checkout') {
            steps {
                // Récupérer le code depuis GitHub (ou un autre repository)
                checkout scm
            }
        }

        stage('Build') {
            steps {
                script {
                    // Exemple pour un projet Maven, vous pouvez remplacer par la commande appropriée pour votre projet
                    sh 'mvn clean install'
                }
            }
        }

        stage('SonarQube Analysis') {
            steps {
                script {
                    // Intégration de SonarQube
                    withSonarQubeEnv('SonarQube') { // Assurez-vous que 'SonarQube' correspond au nom de la configuration de votre SonarQube dans Jenkins
                        sh 'mvn sonar:sonar -Dsonar.projectKey=my-project-key -Dsonar.login=${SONARQUBE_TOKEN}'
                    }
                }
            }
        }

        stage('Quality Gate') {
            steps {
                script {
                    // Attente de l'analyse SonarQube et vérification de la qualité du code
                    def qualityGate = waitForQualityGate()
                    if (qualityGate.status != 'OK') {
                        error "Quality gate failed, build stopped."
                    }
                }
            }
        }

        stage('Docker Build') {
            steps {
                script {
                    // Création de l'image Docker
                    docker.build('my-app')
                }
            }
        }

        stage('Docker Push') {
            steps {
                script {
                    // Authentification à DockerHub ou un registre Docker privé (si nécessaire)
                    withDockerRegistry([credentialsId: 'docker-hub-credentials', url: 'https://index.docker.io/v1/']) {
                        docker.image('my-app').push('latest')
                    }
                }
            }
        }

        stage('Deploy') {
            steps {
                script {
                    // Déployer l'application via Docker (ou toute autre méthode de déploiement)
                    sh 'docker run -d -p 8080:8080 my-app'
                }
            }
        }
    }

    post {
        success {
            // Actions post succès
            echo 'Pipeline succeeded!'
        }
        failure {
            // Actions en cas d'échec
            echo 'Pipeline failed!'
        }
    }
}